#setting up global source 
- hosts: validator_node:seed_node
  remote_user: "{{remote_user}}"
  become: true
  become_user: root
  vars:
    logging: "{{ enable_logging | default('false')}}"
  roles:
  - role: logstash
    when: logging == "true" 
  tasks:
  - name: create a new user for app to run
    user:
      name: "{{app_user}}"
  - name: Clean artifact path
    file:
      state: absent
      path: "{{APP_HOME}}"
    when: reset_network == 'true'
  - name: ansible create a directory for go application
    file:
      path: "{{APP_HOME}}"
      state: directory
      mode: 0755
      owner: "{{app_user}}"
      group: "{{app_user}}"
    when: reset_network == 'true'
  - name: ansible create a directory for nodedata
    file:
      path: "{{APP_HOME}}/nodedata"
      state: directory
      mode: 0755
      owner: "{{app_user}}"
      group: "{{app_user}}"
    when: reset_network == 'true'
  - name: copy binary executables to remote servers
    copy:
      src: "{{lookup('env','GOPATH')}}/{{item}}"
      dest: /usr/local/bin
      mode: 0755
    with_items:
      ["bin/olfullnode", "bin/olclient"]
  - set_fact: app_directory={{APP_HOME}}
  - name: set nofile soft limit
    pam_limits:
      domain: "root"
      limit_type: soft
      limit_item: nofile
      value: 1000000
  - name: set nofile hard limit
    pam_limits:
      domain: "root"
      limit_type: hard
      limit_item: nofile
      value: 1000000
  - name: install lib for cmake
    apt:
      name: "{{ packages }}"
    vars:
      packages:
        - libleveldb-dev
        - libsnappy-dev
        - less
# move validator node consensus folder with private keys 
- hosts: validator_node
  remote_user: "{{remote_user}}"
  become: true
  become_user: root
  tasks:
  - name: copy consensus folder over to each validator node
    copy:
      src: "{{lookup('env','OLDATA')}}/{{node_name}}/{{item}}"
      dest: "{{APP_HOME}}"
      mode: 0644
      owner: "{{app_user}}"
      group: "{{app_user}}"
    with_items: 
      - consensus
      - config.toml
# generate consensus folder for seed nodes 
- hosts: seed_node
  remote_user: "{{remote_user}}"
  become: true
  become_user: root
  tasks:
  - name: copy genesis file to seed node
    copy:
      src: "{{lookup('env','OLDATA')}}/0-Node/consensus/config/genesis.json"
      dest: "{{APP_HOME}}"
      mode: 0644
      owner: "{{app_user}}"
      group: "{{app_user}}"
  - name: generate consensus file for seed node 
    shell: chdir={{APP_HOME}} olfullnode init --root {{APP_HOME}} --genesis {{APP_HOME}}/genesis.json
# change external p2p address to obtain seed address 
- hosts: seed_node:validator_node
  remote_user: "{{remote_user}}"
  become: true
  become_user: root  
  vars:
    internal_ip: "{{ ansible_all_ipv4_addresses | ipaddr('private') | first }}"
  tasks:
  - name: set external p2p address
    lineinfile:
      path: "{{APP_HOME}}/config.toml"
      regexp: 'external_p2p_address'
      line: "  external_p2p_address = \"tcp://{{inventory_hostname}}:26605\""
# set up validator node config.toml
- hosts: validator_node
  remote_user: "{{remote_user}}"
  become: true
  become_user: root
  tasks:
  - name: get persistent peer address
    command: chdir={{APP_HOME}} olfullnode show_node_id --root {{APP_HOME}} --ip
    register: persistent_peers
  - name: set concatenated p2p address string for all seed nodes
    set_fact:
      persistentAddressList: "{{ ansible_play_hosts | map('extract', hostvars, 'persistent_peers') | map(attribute='stdout') | list}}"
      persistentAddress: "{{ ansible_play_hosts | map('extract', hostvars, 'persistent_peers') | map(attribute='stdout') | list | join(',') }}"
    run_once: yes
  # set up seed node config.toml
- hosts: seed_node
  remote_user: "{{remote_user}}"
  become: true
  become_user: root
  tasks:
  - name: get seed address
    command: chdir={{APP_HOME}} olfullnode show_node_id --root {{APP_HOME}} --ip
    register: command_output
  - name: set concatenated p2p address string for all seed nodes
    set_fact:
      seedAddressList: "{{ ansible_play_hosts | map('extract', hostvars, 'command_output') | map(attribute='stdout') | list}}"
    run_once: yes
  - name: set seed node specific configuration 
    lineinfile:
      path: "{{APP_HOME}}/config.toml"
      regexp: 'seed_mode'
      line: "  seed_mode = true"
  - name: set persistent peers
    lineinfile:
      path: "{{APP_HOME}}/config.toml"
      regexp: 'persistent_peers'
      line: "  persistent_peers = {{hostvars[groups['validator_node'][0]]['persistentAddressList'] | to_json }}"
# modify configuration file for fullnodes 
- hosts: validator_node
  remote_user: "{{remote_user}}"
  become: true
  become_user: root  
  tasks:
  - name: set seed nodes 
    lineinfile:
      path: "{{APP_HOME}}/config.toml"
      regexp: 'seeds'
      line: "  seeds = {{hostvars[groups['seed_node'][0]]['seedAddressList'] | to_json }}"
  - name: clear persistent peers so it will connect with seed node instead
    lineinfile:
      path: "{{APP_HOME}}/config.toml"
      regexp: 'persistent_peers'
      line: "  persistent_peers = []"
# edit optimizd tindermint level configuration for distribution 
- hosts: seed_node:validator_node
  remote_user: "{{remote_user}}"
  become: true
  become_user: root  
  tasks:
  - name: set tindermint level configuration
    lineinfile:
      path: "{{APP_HOME}}/config.toml"
      regexp: ' {{item.regexp}}'
      line: "  {{item.line}}"
    with_items:
    - { regexp: "log_output", line: "log_output = \"stdout\""}
    - { regexp: "create_empty_blocks = ", line: "create_empty_blocks = false"}
    - { regexp: "index_tags = ", line: "index_tags = []"}
    - { regexp: "timeout_commit", line: "timeout_commit = 5000"}
    - { regexp: "db = ", line: "db = \"cleveldb\""}
- hosts: validator_node
  remote_user: "{{remote_user}}"
  become: true
  become_user: root  
  tasks:
  - name: fetch updated configuration file for distribution purpose
    fetch:
      flat: true
      src: "{{APP_HOME}}/config.toml"
      dest: "{{lookup('env','OLDATA')}}/{{node_name}}/config.toml"
# change node specific configuration 
- hosts: seed_node:validator_node
  remote_user: "{{remote_user}}"
  become: true
  become_user: root  
  vars:
    internal_ip: "{{ ansible_all_ipv4_addresses | ipaddr('private') | first }}"
  tasks:
  - name: set fullnode specific configuration 
    lineinfile:
      path: "{{APP_HOME}}/config.toml"
      regexp: ' {{item.regexp}}'
      line: "  {{item.line}}"
    with_items:
    - { regexp: "rpc_address", line: "rpc_address = \"tcp://{{internal_ip}}:26604\""}
    - { regexp: "sdk_address", line: "sdk_address = \"http://{{internal_ip}}:26602\""}
    - { regexp: "p2p_address = \"tcp://", line: "p2p_address = \"tcp://{{internal_ip}}:26605\""}
    - { regexp: "node_name", line: "node_name = \"{{node_name}}\""}