---
- hosts: all
  vars:
    app_home: /home/steven/go
  remote_user: steven
  become: true
  become_user: root
  tasks:
  - name: Clean artifact path
    file:
      state: absent
      path: "{{app_home}}"
  - name: ansible create a directory for go application
    file:
      path: "{{app_home}}"
      state: directory
      mode: 0777
  - name: copy binary executables to remote servers
    copy:
      src: ../{{item}}
      dest: /usr/local/bin
      mode: 0777
    with_items:
      ["bin/olfullnode","bin/olconfig","bin/olmonitor", "bin/olvm"]
  - set_fact: app_directory={{app_home}}
#Seed1 Node Config ==============================================
- hosts: 35.203.120.202
  remote_user: steven
  tasks:
  - name: copy configuration file over to fullnodes
    copy:
      src: ../{{item}}
      dest: "{{hostvars['35.203.120.202']['app_directory']}}"
      mode: 0666
    with_items:
      ["consensus"]
  - name: find out internal ip
    shell: ifconfig | grep "inet " | grep -v "127\.0\.0\.1" | awk -F' ' '{print $2}'
    register: internal_ip
  - name: create config.toml file with content
    copy:
      dest: "{{hostvars['35.203.120.202']['app_directory']}}/config.toml"
      content: |
        Identity = "Seed1"
        NodeName = ""
        RpcAddress = "tcp://127.0.0.1:26601"
        P2PAddress = "tcp://{{internal_ip.stdout}}:26611"
        AppAddress = "tcp://127.0.0.1:26621"
        SDKAddress = "tcp://127.0.0.1:26631"
        OLVMAddress = "tcp://127.0.0.1:26641"
        OLVMProtocol = "tcp"
        BTCAddress = "127.0.0.1:NONE"
        ETHAddress = "NONE"
  - name: get p2p address
    shell: chdir={{hostvars['35.203.120.202']['app_directory']}} olconfig get --peers -p Seed1
    register: command_output
  - set_fact: p2pAddress="{{command_output.stdout}}"
#Seed2 Node Config ===========================================
- hosts: 35.203.59.66
  remote_user: steven
  tasks:
  - name: copy configuration file over to fullnodes
    copy:
      src: ../{{item}}
      dest: "{{hostvars['35.203.120.202']['app_directory']}}"
      mode: 0644
    with_items:
      ["consensus"]
  - name: find out internal ip
    shell: ifconfig | grep "inet " | grep -v "127\.0\.0\.1" | awk -F' ' '{print $2}'
    register: internal_ip
  - name: create config.toml file with content
    copy:
      dest: "{{hostvars['35.203.120.202']['app_directory']}}/config.toml"
      content: |
        Identity = "Seed2"
        NodeName = ""
        RpcAddress = "tcp://127.0.0.1:26601"
        P2PAddress = "tcp://{{internal_ip.stdout}}:26611"
        AppAddress = "tcp://127.0.0.1:26621"
        SDKAddress = "tcp://127.0.0.1:26631"
        OLVMAddress = "tcp://127.0.0.1:26641"
        OLVMProtocol = "tcp"
        BTCAddress = "127.0.0.1:NONE"
        ETHAddress = "NONE"
  - name: get p2p address
    command: chdir={{hostvars['35.203.120.202']['app_directory']}} olconfig get --peers -p Seed2
    register: command_output
  - set_fact: p2pAddress="{{hostvars['35.203.120.202']['p2pAddress']}},{{command_output.stdout}}"
#Validator Node Configs
- hosts: 35.203.52.149:35.203.106.138:35.203.102.115:35.203.114.25
  vars:
    app_home: "{{hostvars['35.203.120.202']['app_directory']}}"
  remote_user: steven
  tasks:
  - name: copy configuration file over to Alice fullnodes
    copy:
      src: ../Alice-Node/consensus
      dest: "{{app_home}}"
      mode: 0644
    when: inventory_hostname == '35.203.52.149'

  - name: copy configuration file over to Bob fullnodes
    copy:
      src: ../Bob-Node/consensus
      dest: "{{app_home}}"
      mode: 0644
    when: inventory_hostname == '35.203.106.138'

  - name: copy configuration file over to Carol fullnodes
    copy:
      src: ../Carol-Node/consensus
      dest: "{{app_home}}"
      mode: 0644
    when: inventory_hostname == '35.203.102.115'

  - name: copy configuration file over to David fullnodes
    copy:
      src: ../David-Node/consensus
      dest: "{{app_home}}"
      mode: 0644
    when: inventory_hostname == '35.203.114.25'
  
  - name: find out internal ip
    shell: ifconfig | grep "inet " | grep -v "127\.0\.0\.1" | awk -F' ' '{print $2}'
    register: internal_ip
  - name: create config.toml file with content
    copy:
      dest: "{{app_home}}/config.toml"
      content: |
        Identity = ""
        NodeName = ""
        RpcAddress = "tcp://127.0.0.1:26601"
        P2PAddress = "tcp://{{internal_ip.stdout}}:26611"
        AppAddress = "tcp://127.0.0.1:26621"
        SDKAddress = "tcp://127.0.0.1:26631"
        OLVMAddress = "tcp://127.0.0.1:26641"
        OLVMProtocol = "tcp"
        BTCAddress = "127.0.0.1:NONE"
        ETHAddress = "NONE"
- hosts: all
  remote_user: steven
  become: true
  become_user: root
  tasks:
    - name: Get running processes
      shell: "ps -ef | grep -v grep | grep -w olvm | awk '{print $2}'"
      register: running_processes

    - name: Kill running processes
      shell: "kill {{ item }}"
      with_items: "{{ running_processes.stdout_lines }}"

    - wait_for:
        path: "/proc/{{ item }}/status"
        state: absent
      with_items: "{{ running_processes.stdout_lines }}"
      ignore_errors: yes
      register: killed_processes
    
    - name: Force kill stuck processes
      shell: "kill -9 {{ item }}"
      with_items: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"
    
    - name: Get running processes
      shell: "ps -ef | grep -v grep | grep -w olmonitor | awk '{print $2}'"
      register: running_processes

    - name: Kill running processes
      shell: "kill {{ item }}"
      with_items: "{{ running_processes.stdout_lines }}"

    - wait_for:
        path: "/proc/{{ item }}/status"
        state: absent
      with_items: "{{ running_processes.stdout_lines }}"
      ignore_errors: yes
      register: killed_processes1

    - name: Force kill stuck processes
      shell: "kill -9 {{ item }}"
      with_items: "{{ killed_processes1.results | select('failed') | map(attribute='item') | list }}"
    
    - name: Get running processes
      shell: "ps -ef | grep -v grep | grep -w olfullnode | awk '{print $2}'"
      register: running_processes

    - name: Kill running processes
      shell: "kill {{ item }}"
      with_items: "{{ running_processes.stdout_lines }}"

    - wait_for:
        path: "/proc/{{ item }}/status"
        state: absent
      with_items: "{{ running_processes.stdout_lines }}"
      ignore_errors: yes
      register: killed_processes1

    - name: Force kill stuck processes
      shell: "kill -9 {{ item }}"
      with_items: "{{ killed_processes1.results | select('failed') | map(attribute='item') | list }}"

#Start seed & validator Nodes
- hosts: all
  vars:
    app_home: "{{hostvars['35.203.120.202']['app_directory']}}"
    p2p_address: "{{hostvars['35.203.59.66']['p2pAddress']}}"
  remote_user: steven
  tasks:
  - debug: "msg={{p2p_address}}"
  - name: start monitor app
    shell: "(olmonitor start olvm execute --root {{app_home}} >> {{app_home}}/olvm.log 2>&1 &)"
    async: 45
    poll: 0
  - shell: pgrep olmonitor
    register: monitor_process
  - debug: "msg={{monitor_process.stdout}}"
  - name: start fullnode
    shell: >
      (chdir={{app_home}} olfullnode node --root {{app_home}} 
      --tendermintRoot {{app_home}}/consensus 
      --seeds {{p2p_address}} 
      --persistent_peers {{p2p_address}} >> 
      "{{app_home}}"/olfullnode.log 2>&1 &)
    async: 45
    poll: 0
  - shell: pgrep olfullnode
    register: fullnode_process
  - debug: "msg={{fullnode_process.stdout}}"