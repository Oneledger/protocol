---
- hosts: all
  become: true
  become_user: root
  vars:
    GOPATH: /home/{{app_user}}/go
    OLROOT: "{{GOPATH}}/src/github.com/Oneledger"
    OLDATA: "{{GOPATH}}/data"
    GOLANG_INSTALL_DIR: /usr/local/go
    CONTAINER_OUTPUT_PATH: "/home/{{app_user}}/output"
    compress_image: "{{ compress | default('false')}}"
    logging: "{{ enable_logging | default('false')}}"
  roles:
  - role: logstash
    when: logging == "true" 
  - role: gantsign.golang
    golang_gopath: "{{GOPATH}}"
    golang_version: 1.11.6
    golang_install_dir: "{{GOLANG_INSTALL_DIR}}"
  environment:
    GOPATH: "{{GOPATH}}"
    OLTEST: "{{OLROOT}}/protocol/node/tests"
    OLDATA: "{{OLDATA}}"
    OLSETUP: "{{OLROOT}}/protocol/node/setup"
    OLSCRIPT: "{{OLROOT}}/protocol/node/scripts"
    OLROOT: "{{OLROOT}}"
    PATH: "{{lookup('env', 'PATH')}}:/{{GOPATH}}/bin:{{GOLANG_INSTALL_DIR}}/bin"
  tasks:
  - name: Install a list of dependent packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - libleveldb-dev
      - libsnappy-dev
      - procps
      - git
      - nano
      - vim
      - curl
  - name: add user group for the app
    group:
      name: "{{app_user}}"
  - name: add user to run the app 
    user:
      name: "{{app_user}}"
      group: "{{app_user}}"
      append: yes
  - name: create directory for source code & app data
    file:
      path: "{{OLROOT}}/protocol"
      state: directory
      mode: 0755
      recurse: yes
      owner: "{{app_user}}"
      group: "{{app_user}}"
  - name: create directory non recurse 
    file: 
      path: "{{item}}"
      state: directory
      mode: 0755
      owner: "{{app_user}}"
      group: "{{app_user}}"
    with_items:
      - "{{OLDATA}}"
      - "{{CONTAINER_OUTPUT_PATH}}"
  - name: clone repo 
    git:
      repo: https://github.com/Oneledger/protocol.git
      version: "{{app_version}}"
      dest: "{{OLROOT}}/protocol"
      accept_hostkey: yes 
  - name: set environment variable 
    lineinfile:
      path: /home/{{app_user}}/.bashrc
      line: "{{item}}"
      insertbefore: BOF
    with_items:
      - "export GOPATH={{GOPATH}}"
      - "export OLROOT={{OLROOT}}"
      - "export OLDATA={{OLDATA}}"
      - "export OLSCRIPT={{OLROOT}}/protocol/node/scripts"
      - "export OLSETUP={{OLROOT}}/protocol/node/setup"
      - "export OLTEST={{OLROOT}}/protocol/node/tests"
      - "export GO111MODULE=on"
      - "export PATH=$PATH:{{GOPATH}}/bin:{{GOLANG_INSTALL_DIR}}/bin"
  - name: source bashrc 
    shell: . /home/{{app_user}}/.bashrc
  - name: compile binary
    shell: chdir={{OLROOT}}/protocol/node make update install_c
  - name: move app binary artifact to user bin directory
    shell: cp -R {{GOPATH}}/bin/* /usr/local/bin/  
  - name: change ownership of artifact to app user
    file:
      dest: "{{GOPATH}}"
      owner: "{{app_user}}"
      group: "{{app_user}}"
      recurse: true
  - name: create temp genesis
    copy:
      dest: "{{OLDATA}}/genesis.json"
      owner: "{{app_user}}"
      group: "{{app_user}}"
      mode: 0744
      content: |
        {
          "genesis_time": "2019-03-21T23:13:28.30088941Z",
          "chain_id": "chronos-2",
          "consensus_params": {
            "block_size": {
              "max_bytes": "22020096",
              "max_gas": "-1"
            },
            "evidence": {
              "max_age": "100000"
            },
            "validator": {
              "pub_key_types": [
                "ed25519"
              ]
            }
          },
          "validators": [
            {
              "address": "",
              "pub_key": {
                "type": "tendermint/PubKeyEd25519",
                "value": "Ch71F0IIYBGWDmTQcj3xZVc6Mz7LtbmfK7T9dIXMNh4="
              },
              "power": "1",
              "name": "David"
            },
            {
              "address": "",
              "pub_key": {
                "type": "tendermint/PubKeyEd25519",
                "value": "efk+XQZRpN48Piil9bUkFtReCzl/x22ur9u974WFSG0="
              },
              "power": "1",
              "name": "Alice"
            },
            {
              "address": "",
              "pub_key": {
                "type": "tendermint/PubKeyEd25519",
                "value": "rIePLkH2fq4YShxz+n1yHWdIV+S+lZR+zlvclI8pqnA="
              },
              "power": "1",
                "name": "Bob"
            },
            {
              "address": "",
              "pub_key": {
                "type": "tendermint/PubKeyEd25519",
                "value": "pTt2+Z+TB53MW7MVThqWgR7Jj/+lAa2iPo1x5QNc0d4="
              },
              "power": "1",
              "name": "Carol"
            }
          ],
          "app_hash": "",
          "app_state": {
            "account": "Zero",
            "states": [
              {
                "amount": "1000000000",
                "currency": "OLT"
              },
              {
                "amount": "10000",
                "currency": "VT"
              }
            ]
          }
        }    
  - name: fullnode configuration setup
    copy:  
      dest: "/usr/local/bin/fullnodeSetup"
      owner: "{{app_user}}"
      group: "{{app_user}}"
      mode: 0744      
      content: |
        #!/usr/bin/env bash
        source ~/.profile
        public_ip="$(curl ifconfig.me | awk '{$1=$1};1')" 
        internal_ip="$(hostname -I | awk '{$1=$1};1')"
        persistent_peers="[\"e6edf32f3e3484dd6dc310bdfd790b82efd7bacb@35.243.138.139:26605\""
        persistent_peers+=",\"781079e294e565ab5103137ce59589d4d2fb81ce@35.221.2.67:26605\""
        persistent_peers+=",\"bf74913a9808c2fd529d03963f7ffff0eb77194c@35.202.153.53:26605\""
        persistent_peers+=",\"073fe394a98d4c270b482b50827af259a5aa5d0c@35.185.26.138:26605\"]"
        seeds="[\"a1d3dad8e625edf9061d8aa6894fcfa4c68522d7@35.222.28.220:26605\""
        seeds+=",\"7e34c6ce8c820105d9dfd460f10b8e580d248ded@35.245.156.174:26605\"]"
        olfullnode init --genesis {{OLDATA}}/genesis.json --root {{OLDATA}}
        sed -i "s/rpc_address.*/rpc_address = \"tcp:\/\/$internal_ip:26604\"/" {{OLDATA}}/config.toml
        sed -i "s/p2p_address.*/p2p_address = \"tcp:\/\/$internal_ip:26605\"/" {{OLDATA}}/config.toml
        sed -i "s/sdk_address.*/sdk_address = \"tcp:\/\/$internal_ip:26606\"/" {{OLDATA}}/config.toml
        sed -i "s/external_p2p_address.*/external_p2p_address = \"tcp:\/\/$public_ip:26605\"/" {{OLDATA}}/config.toml
        sed -i "s/seed_mode.*/seed_mode = false/" {{OLDATA}}/config.toml
        sed -i "s/persistent_peers.*/persistent_peers = $persistent_peers/" {{OLDATA}}/config.toml
        sed -i "s/seeds.*/seeds = $seeds/" {{OLDATA}}/config.toml
        sed -i "s/log_output.*/log_output = \"stdout\"/" {{OLDATA}}/config.toml
        sed -i "s/create_empty_blocks.=.*/create_empty_blocks = false/" {{OLDATA}}/config.toml
        sed -i "s/db.*/db = \"cleveldb\"/" {{OLDATA}}/config.toml
        sed -i "s/node_name.*/node_name = \"$public_ip\"/" {{OLDATA}}/config.toml
  - name: create start script
    copy:
      dest: "/usr/local/bin/fullnodeStartup"
      owner: "{{app_user}}"
      group: "{{app_user}}"
      mode: 0744
      content: |
        #!/usr/bin/env bash
        fullnodeSetup
        olmonitor start olvm execute --root {{OLDATA}} >> {{OLDATA}}/olvm.log 2>&1 &
        olfullnode node --root {{OLDATA}} >> {{OLDATA}}/olfullnode.log 2>&1 &
        cp -R {{GOPATH}}/* {{CONTAINER_OUTPUT_PATH}}
        exec "$@"
  - name: create start quick script to start node 
    copy:
      dest: "/usr/local/bin/startNode"
      owner: "{{app_user}}"
      group: "{{app_user}}"
      mode: 0744
      content: |
        #!/usr/bin/env bash
        olmonitor start olvm execute --root {{OLDATA}} >> {{OLDATA}}/olvm.log 2>&1 &
        olfullnode node --root {{OLDATA}} >> {{OLDATA}}/olfullnode.log 2>&1 &
  - name: create start quick script to stop node 
    copy:
      dest: "/usr/local/bin/stopNode"
      owner: "{{app_user}}"
      group: "{{app_user}}"
      mode: 0744
      content: |
        #!/usr/bin/env bash
        pkill olfullnode
        pkill olmonitor
        pkill olvm
  - name: create a systemd monitor service file
    copy:
      dest: "/etc/systemd/system/olmonitor.service"
      owner: "root"
      group: "root"
      mode: 0644
      content: |
        [Unit]
        Description=montor
        After=network.target

        [Service]
        WorkingDirectory={{OLDATA}}
        ExecStart=/usr/local/bin/olmonitor start olvm execute --root {{OLDATA}}
        # Other Restart options: or always, on-abort, etc
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target
  - name: create a systemd olfullnode service file
    copy:
      dest: "/etc/systemd/system/olfullnode.service"
      owner: "root"
      group: "root"
      mode: 0644
      content: |
        [Unit]
        Description=fullnode server
        After=network.target

        [Service]
        WorkingDirectory={{OLDATA}}
        ExecStart=/usr/local/bin/olfullnode node --root {{OLDATA}}
        # Other Restart options: or always, on-abort, etc
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target
  - name: compress image size by remove developer dependencies
    file:
      path: "{{ item }}"
      state: absent
    with_items:
    - "{{GOLANG_INSTALL_DIR}}"
    - "{{GOPATH}}/src"
    - "{{GOPATH}}/pkg"
    - "{{GOPATH}}/bin"
    when: compress_image == "true"
  - name: remove unused apt packages to reduce image size 
    apt:
      name: ["nano","git","vim"]
      state: absent
    when: compress_image == "true"
      
