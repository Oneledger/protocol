- hosts: "{{ip}}"
  environment:
    GOPATH: "{{lookup('env','HOME')}}/go"
  vars:
    app_user: "{{hostvars[groups['fullnode'][0]]['app_user']}}"
    GOPATH: "/home/{{app_user}}/go"
  remote_user: steven
  become: true
  become_user: root
  tasks:
  - name: create a new user for app to run
    user:
      name: "{{app_user}}"
  - name: Clean artifact path
    file:
      state: absent
      path: "{{GOPATH}}"
    when: reset_network == 'true'
  - name: ansible create a directory for go application
    file:
      path: "{{GOPATH}}"
      state: directory
      mode: 0755
    when: reset_network == 'true'
  - name: copy binary executables to remote servers
    copy:
      src: "{{lookup('env','GOPATH')}}/{{item}}"
      dest: /usr/local/bin
      mode: 0755
    with_items:
      ["bin/olfullnode","bin/olconfig","bin/olmonitor", "bin/olvm", "bin/olclient"]
  - set_fact: app_directory={{GOPATH}}
  - name: set nofile soft limit
    pam_limits:
      domain: "root"
      limit_type: soft
      limit_item: nofile
      value: 1000000
  - name: set nofile hard limit
    pam_limits:
      domain: "root"
      limit_type: hard
      limit_item: nofile
      value: 1000000
  - name: copy configuration file over to each validator and fullnode
    copy:
      src: "../consensus"
      dest: "{{GOPATH}}"
      mode: 0644
      owner: "{{app_user}}"
      group: "{{app_user}}"
  - name: create config.toml file with content
    vars:
      internal_ip: "{{ ansible_all_ipv4_addresses | ipaddr('private') | first }}"
    copy:
      dest: "{{GOPATH}}/config.toml"
      owner: "{{app_user}}"
      group: "{{app_user}}"
      content: |
        Identity = ""
        NodeName = ""
        RpcAddress = "tcp://{{internal_ip}}:26601"
        P2PAddress = "tcp://{{internal_ip}}:26611"
        AppAddress = "tcp://127.0.0.1:26621"
        SDKAddress = "tcp://{{internal_ip}}:26631"
        OLVMAddress = "tcp://127.0.0.1:26641"
        OLVMProtocol = "tcp"
        BTCAddress = "127.0.0.1:NONE"
        ETHAddress = "NONE"
  - name: create a systemd monitor service file
    copy:
      dest: "/etc/systemd/system/olmonitor.service"
      owner: "root"
      group: "root"
      mode: 0644
      content: |
        [Unit]
        Description=montor
        After=network.target

        [Service]
        WorkingDirectory={{GOPATH}}
        ExecStart=/usr/local/bin/olmonitor start olvm execute --root {{GOPATH}} >> {{GOPATH}}/olvm.log 2>&1 &
        # Other Restart options: or always, on-abort, etc

        [Install]
        WantedBy=multi-user.target
  - name: start systemd olmonitor service
    systemd:
      name: olmonitor.service
      scope: system
      state: restarted
      daemon_reload: yes
  - name: create a systemd olfullnode service file
    copy:
      dest: "/etc/systemd/system/olfullnode.service"
      owner: "root"
      group: "root"
      mode: 0644
      content: |
        [Unit]
        Description=fullnode server
        After=network.target

        [Service]
        WorkingDirectory={{GOPATH}}
        ExecStart=/usr/local/bin/olfullnode node --root {{GOPATH}}\
          --tendermintRoot {{GOPATH}}/consensus\
          --seeds 69cbb82a35f621b7a07cfdf9b30b42b943424daa@seed1.chronos.oneledger.network:26615,008a082847ac0d631c174fc23dfd5c2adbe422fa@seed2.chronos.oneledger.network:26615,74fae3565f3d542d0833b7d5cde02d095d6c979f@seed3.chronos.oneledger.network:26615,b36da7eeeff531bb8cac995d8b818b28ea4594e5@seed4.chronos.oneledger.network:26615\
          --persistent_peers 69cbb82a35f621b7a07cfdf9b30b42b943424daa@seed1.chronos.oneledger.network:26615,008a082847ac0d631c174fc23dfd5c2adbe422fa@seed2.chronos.oneledger.network:26615,74fae3565f3d542d0833b7d5cde02d095d6c979f@seed3.chronos.oneledger.network:26615,b36da7eeeff531bb8cac995d8b818b28ea4594e5@seed4.chronos.oneledger.network:26615 >>\
          "{{GOPATH}}"/olfullnode.log 2>&1 &
        # Other Restart options: or always, on-abort, etc

        [Install]
        WantedBy=multi-user.target
  - name: start systemd olfullnode service
    systemd:
      name: olfullnode.service
      scope: system
      state: restarted
      daemon_reload: yes