---
# tasks file for dev-env-setup
- name: Install a list of dependent packages
  apt:
    name: "{{ packages }}"
    update_cache: yes
  vars:
    packages:
    - libleveldb-dev
    - libsnappy-dev
    - git
    - nano
    - python-pip
    - unzip
    - apt-transport-https
- name: pull protocol repo 
  git:
    dest: "{{OLROOT}}/protocol"
    repo: https://github.com/Oneledger/protocol.git
    accept_hostkey: yes 
    force: yes
- name: copy local private keys to remote for clone git private repo
  copy:
    src: "~/{{item}}"
    dest: "{{OLROOT}}/{{item}}"
    owner: "{{ssh_user}}"
    group: "{{ssh_user}}"
    mode: 0600
  with_items: 
    - .ssh/id_rsa
    - .ssh/id_rsa.pub  
- name: pull protocol repo 
  git:
    dest: "{{OLROOT}}/infrastructure"
    repo: git@github.com:Oneledger/infrastructure.git
    key_file: "{{OLROOT}}/.ssh/id_rsa"
    accept_hostkey: yes 
    force: yes
- name: change protocol repo ownership
  file:
    path: "{{OLROOT}}"
    owner: "{{ssh_user}}"
    group: "{{ssh_user}}"
    mode: '0744'
    recurse: true   
- name: install ansible module
  pip:
    name: ansible>=2.8.0
- name: install terraform executable 
  get_url:
    url: https://releases.hashicorp.com/terraform/0.11.13/terraform_0.11.13_linux_amd64.zip
    dest: "{{OLROOT}}"
    mode: 0644
- name: Extract terraform into /usr/local/bin
  unarchive:
    src: "{{OLROOT}}/terraform_0.11.13_linux_amd64.zip"
    remote_src: true
    dest: /usr/local/bin
    mode: 711
- name: set environment variable 
  lineinfile:
    path: /home/{{ssh_user}}/.bashrc
    line: "{{item}}"
    insertbefore: BOF
  with_items:
    - "export GOPATH={{GOPATH}}"
    - "export OLROOT={{OLROOT}}"
    - "export OLDATA={{OLDATA}}"
    - "export OLSCRIPT={{OLROOT}}/protocol/node/scripts"
    - "export OLSETUP={{OLROOT}}/protocol/node/setup"
    - "export OLTEST={{OLROOT}}/protocol/node/tests"
    - "export GO111MODULE=on"
    - "export PATH=$PATH:{{GOPATH}}/bin"
- name: source bashrc 
  shell: . /home/{{ssh_user}}/.bashrc
- name: download public signing key for gcloud
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
- name: Save kubernete PPA to /etc/apt/sources.list.d/kubernetes.list
  apt_repository: 
    repo: 'deb https://apt.kubernetes.io/ kubernetes-xenial main' 
    state: present 
    filename: /etc/apt/sources.list.d/kubernetes.list
    update_cache: yes
- name: install kubectl
  apt:
    name: kubectl
    update_cache: yes
- name: download minikube binary
  get_url:
    url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    dest: "{{OLROOT}}/minikube"
    mode: 0711
    owner: "{{ssh_user}}"
    group: "{{ssh_user}}"
- name: Copy file with owner and permission, using symbolic representation
  shell: mv {{OLROOT}}/minikube /usr/local/bin
- name: import oracle signing keys
  apt_key:
    url: "{{ item }}"
    state: present
  with_items:
    - https://www.virtualbox.org/download/oracle_vbox_2016.asc
    - https://www.virtualbox.org/download/oracle_vbox.asc
- name: Save virtualbox PPA to /etc/apt/sources.list.d/virtualbox.list
  apt_repository: 
    repo: 'deb http://download.virtualbox.org/virtualbox/debian stretch contrib' 
    state: present 
    filename: /etc/apt/sources.list.d/virtualbox.list
    update_cache: yes
- name: install virtualbox
  apt:
    name: virtualbox-6.0
    update_cache: yes